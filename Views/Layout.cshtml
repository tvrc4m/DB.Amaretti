@using Orchard.ContentManagement
@using Orchard.Utility.Extensions
@using Orchard.Search.ViewModels;
@using Orchard.Users.Models;

@model dynamic
@{
    var title = (string)Convert.ToString(Layout.Title);
    IEnumerable<dynamic> firstLevelMenuItems = Layout.TopMenu;
}

@{
    Style.Include("Lib.css", "Lib.min.css");
    Style.Include("//maxcdn.bootstrapcdn.com/font-awesome/4.6.1/css/font-awesome.min.css");
    Style.Include("db.ameretti.min.css");

    Script.Include("https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js").UseCondition("lt IE 9").AtHead();
    Script.Include("https://oss.maxcdn.com/respond/1.4.2/respond.min.js").UseCondition("lt IE 9").AtHead();
    Script.Require("jQuery");
    Script.Include("db.ameretti.min.js");
}
@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix)
    {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new[] { "AsideLeft", "AsideRight" }, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass))
    {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new[] { "FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth" }, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass))
    {
        Model.Classes.Add(footerQuadClass);
    }
    Layout.Title = Model.Title;
    Model.Id = "layout-wrapper";
    var tag = Tag(Model, "div");
}
@tag.StartElement
<div id="layout-content" class="am-wrapper am-fixed-sidebar am-aside" data-default-remove-confirmation-prompt="@T("Are you sure you want to remove this element?")'">
    <nav class="navbar navbar-default navbar-fixed-top am-top-header">
        <div class="container-fluid">
            <div class="navbar-header">
                <div class="page-title"><span>@Html.Title(title)</span></div><a href="#" class="am-toggle-left-sidebar navbar-toggle collapsed"><span class="icon-bar"><span></span><span></span><span></span></span></a><a href="~/" class="navbar-brand"></a>
            </div>
            <a href="#" class="am-toggle-right-sidebar"><span class="icon s7-menu2"></span></a><a href="#" data-toggle="collapse" data-target="#am-navbar-collapse" class="am-toggle-top-header-menu collapsed"><span class="icon s7-angle-down"></span></a>
            <div id="am-navbar-collapse" class="collapse navbar-collapse">
                <ul class="nav navbar-nav navbar-right am-user-nav">
                    <li class="dropdown">
                        <a href="/Admin/Users" data-toggle="dropdown" role="button" aria-expanded="false" class="dropdown-toggle">
                            <span class="navbar-user-avatar s7-user"></span>
                            <span class="angle-down s7-angle-down"></span>
                        </a>
                        <ul role="menu" class="dropdown-menu">
                            @if (WorkContext.CurrentUser != null)
                            {
                                dynamic user = WorkContext.CurrentUser.ContentItem;
                            <li>
                                <a itemprop="url" href="/Admin/Users" rel="nofollow"><i class="icon s7-user"></i>&nbsp;&nbsp;<span itemprop="title">@Html.ItemDisplayText(WorkContext.CurrentUser)</span></a>
                                <ul>
                                    <li>
                                        <i class="icon s7-lock"></i>&nbsp;&nbsp;<span itemprop="title">@Html.ActionLink(T("Password").ToString(), "ChangePassword", new { Controller = "Account", Area = "Orchard.Users" }, new { rel = "nofollow" })</span>
                                    </li>
                                    <li>
                                        <i class="icon s7-back"></i>&nbsp;&nbsp;<span itemprop="title">@Html.ActionLink(T("Sign Out").ToString(), "LogOff", new { Controller = "Account", Area = "Orchard.Users", ReturnUrl = Context.Request.RawUrl }, new { rel = "nofollow" })</span>
                                    </li>
                                    @if (AuthorizedFor(Orchard.Security.StandardPermissions.AccessAdminPanel))
                                        {
                                        <li>
                                            <i class="icon s7-helm"></i>&nbsp;&nbsp;<span itemprop="title">@Html.ActionLink(T("Dashboard").ToString(), "Index", new { Area = "Dashboard", Controller = "Admin" }, new { rel = "nofollow" })</span>
                                        </li>
                                        <li role="separator" class="divider"></li>
                                        <li><span>Administration</span></li>
                                        <li role="separator" class="divider"></li>
                                        <li><i class="icon s7-plus"></i>&nbsp;&nbsp;<a rel="nofollow" id="content" href="/Admin/Contents/List" data-original-title="Content"><span itemprop="title">Content</span></a></li>
                                        <li><i class="icon s7-news-paper"></i>&nbsp;&nbsp;<a rel="nofollow" id="blogs" href="/Admin/Blogs/13" data-original-title="Blogs"><span itemprop="title">Blogs</span></a></li>
                                        <li><i class="icon s7-plugin"></i>&nbsp;&nbsp;<a rel="nofollow" id="modules" href="/Admin/Modules/Features" data-original-title="Modules"><span itemprop="title">Modules</span></a></li>
                                        <li><i class="icon s7-photo"></i>&nbsp;&nbsp;<a rel="nofollow" id="media" href="/Admin/Orchard.MediaLibrary" data-original-title="Media"><span itemprop="title">Media</span></a></li>
                                        <li><i class="icon s7-server"></i>&nbsp;&nbsp;<a rel="nofollow" id="cache" href="/Admin/Orchard.OutputCache" data-original-title="Cache"><span itemprop="title">Cache</span></a></li>
                                        <li><i class="icon s7-file"></i>&nbsp;&nbsp;<a rel="nofollow" id="cache" href="/Orchard.OutputCache/Statistics" data-original-title="Cache Stats"><span itemprop="title">Cache Stats</span></a></li>
                                        <li><i class="icon s7-settings"></i>&nbsp;&nbsp;<a rel="nofollow" id="index" href="/Admin/Settings/Index" data-original-title="Settings"><span itemprop="title">Settings</span></a></li>
                                        <li><i class="icon s7-coffee"></i>&nbsp;&nbsp;<a rel="nofollow" id="warmup" href="/Admin/Warmup" data-original-title="Warmup"><span itemprop="title">Warmup</span></a></li>
                                        <li><i class="icon s7-leaf"></i>&nbsp;&nbsp;<a rel="nofollow" id="widgets" href="/Admin/Widgets" data-original-title="Widgets"><span itemprop="title">Widgets</span></a></li>
                                        }
                                </ul>
                            </li>
                            }
                            else
                            {
                            <li>
                                @Html.ActionLink(T("Sign In").ToString(), "LogOn", new { Controller = "Account", Area = "Orchard.Users", ReturnUrl = (Request.QueryString["ReturnUrl"] ?? Request.RawUrl) }, new { @class = "ajax inline", href = "#inline_content", rel = "nofollow" })
                            </li>
                            }
                        </ul>
                    </li>
                </ul>
                <ul class="nav navbar-nav am-nav-right">
                    @if (Model.Navigation != null)
                    {
                    <li>
                        <div class="navbar-wrapper">
                            <div class="navbar">
                                <div class="navbar-collapse collapse" id="main-menu">
                                    @Zone(Model.Navigation)
                                </div>
                            </div>
                        </div>
                    </li>
                    }
                </ul>
                <ul class="nav navbar-nav navbar-right am-icons-nav">
                    <li class="dropdown">
                        <a href="#" data-toggle="dropdown" role="button" aria-expanded="false" class="dropdown-toggle"><span class="icon s7-comment"></span></a>
                        @if (Model.TopMessages != null)
                        {
                        <ul id="top-messages" class="dropdown-menu am-messages">
                            @Zone(Model.TopMessages)
                        </ul>
                        }
                    </li>
                    <li class="dropdown">
                        <a href="#" data-toggle="dropdown" role="button" aria-expanded="false" class="dropdown-toggle"><span class="icon s7-bell"></span><span class="indicator"></span></a>
                        @if (Model.TopNotifications != null)
                        {
                        <ul id="top-notifications" class="dropdown-menu am-notifications">
                            @Zone(Model.TopNotifications)
                        </ul>
                        }
                    </li>
                    <li class="dropdown">
                        <a href="#" data-toggle="dropdown" role="button" aria-expanded="false" class="dropdown-toggle"><span class="icon s7-share"></span></a>
                        @if (Model.TopConnections != null)
                        {
                        <ul id="top-connections" class="dropdown-menu am-connections">
                            @Zone(Model.TopConnections)
                        </ul>
                        }
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <div class="zone zone-side-menu">
        <div class="am-left-sidebar">
            <div class="content">
                @if (Model.SideMenu != null)
                {
                <div id="sidemenu">
                    @Zone(Model.SideMenu)
                </div>
                }
            </div>
        </div>
    </div>
    <div class="am-content">
        <div class="page-head">
            @if (Model.Header != null)
            {
            <header id="layout-header" class="group">
                <div id="header">
                    @Zone(Model.Header)
                </div>
            </header>
            }
            <div>
                @if (Model.Featured != null)
            {
                <div id="layout-featured" class="group">
                    @Zone(Model.Featured)
                </div>
                }
            </div>
        </div>
        <div>
            @if (Model.BeforeMain != null)
            {
            <div id="layout-before-main" class="group">
                @Zone(Model.BeforeMain)
            </div>
            }
        </div>
        <div id="layout-main-container" class="main-content container-fluid">
            <div itemscope="itemscope" itemtype="http://schema.org/WebPage">
                <div id="layout-main" class="group col-xs-12 col-sm-11 col-md-11 col-lg-12" data-pjax-container>
                    <div id="layout-content" class="group">
                        @if (Model.Messages != null)
                        {
                        <div id="messages">
                            @Display(Model.Messages)
                        </div>
                        }
                        @if (Model.Content != null)
                        {
                        <div id="content" class="group">
                            @Zone(Model.Content)
                        </div>
                        }
                        @if (Model.AfterContent != null)
                        {
                        <div id="after-content">
                            @Zone(Model.AfterContent)
                        </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <aside class="page-aside-right">
        <div class="content">
            @if (Model.AsideRight != null)
            {
            <aside id="aside-right" class="group page-aside">
                <div class="am-scroller nano has-scrollbar">
                    <div class="nano-content">
                        @Zone(Model.AsideRight)
                    </div>
                </div>
                <div style="display: none;" class="nano-pane"><div style="height: 201px; transform: translate(0px, 0px);" class="nano-slider"></div></div>
            </aside>
            }
        </div>
    </aside>
    <aside class="page-aside-left">
        <div class="content">
            @if (Model.AsideLeft != null)
            {
            <aside id="aside-right" class="group page-aside">
                <div class="am-scroller nano has-scrollbar">
                    <div style="right: -17px;" class="nano-content">
                        @Zone(Model.AsideLeft)
                    </div>
                </div>
                <div style="display: none;" class="nano-pane"><div style="height: 201px; transform: translate(0px, 0px);" class="nano-slider"></div></div>
            </aside>
            }
        </div>
    </aside>
    <div class="after-main">
        @if (Model.AfterMain != null)
        {
        <div id="layout-after-main" class="group">
            @Zone(Model.AfterMain)
        </div>
        }
    </div>
    @tag.EndElement
    <div id="layout-footer" class="group">
        <hr />
        <footer id="footer">
            @if (Model.FooterQuadFirst != null || Model.FooterQuadSecond != null || Model.FooterQuadThird != null || Model.FooterQuadFourth != null)
            {
            <div id="footer-quad" class="group">
                @if (Model.FooterQuadFirst != null)
                    {
                    <div id="footer-quad-first">
                        @Zone(Model.FooterQuadFirst)
                    </div>
                    }
                @if (Model.FooterQuadSecond != null)
                    {
                    <div id="footer-quad-second">
                        @Zone(Model.FooterQuadSecond)
                    </div>
                    }
                @if (Model.FooterQuadThird != null)
                    {
                    <div id="footer-quad-third">
                        @Zone(Model.FooterQuadThird)
                    </div>
                    }
                @if (Model.FooterQuadFourth != null)
                    {
                    <div id="footer-quad-fourth">
                        @Zone(Model.FooterQuadFourth)
                    </div>
                    }
            </div>
            }
            @if (Model.Footer != null)
            {
            <div id="footer-sig" class="group">
                @Zone(Model.Footer)
            </div>
            }
        </footer>
    </div>
    @if (Model.Popup != null)
            {
    <div id="layout-popup" class="zone zone-popup">
        <div id="Popup" class="well-sm well-sm1 form-group">
            @Zone(Model.Popup)
        </div>
    </div>
    }
    @if (Model.Registration != null)
            {
    <div id="layout-registration" class="zone zone-registration">
        <div id="registration" class="form-group">
            @Zone(Model.Registration)
        </div>
    </div>
    }
</div>
<nav class="am-right-sidebar">
    <div class="sb-content">
        <div class="user-info"><img alt="DB" src="https://avatars2.githubusercontent.com/u/10813159?v=3&amp;s=30"><span class="name">Donald Boulton<span class="status"></span></span><span class="position">Orchard Developer</span></div>
        <div class="tab-navigation">
            <ul role="tablist" class="nav nav-tabs nav-justified">
                <li role="presentation" class="active"><a href="#tab1" aria-controls="home" role="tab" data-toggle="tab"> <span class="icon s7-share"></span></a></li>
                <li role="presentation"><a href="#tab2" aria-controls="profile" role="tab" data-toggle="tab"> <span class="icon s7-mail-open-file"></span></a></li>
                <li role="presentation"><a href="#tab3" aria-controls="signal" role="tab" data-toggle="tab"> <span class="icon s7-signal"></span></a></li>
                <li role="presentation"><a href="#tab4" aria-controls="settings" role="tab" data-toggle="tab"> <span class="icon s7-ticket"></span></a></li>
            </ul>
        </div>
        <div class="tab-panel">
            <div class="tab-content">
                <div id="tab1" role="tabpanel" class="tab-pane announcement active am-scroller nano has-scrollbar">
                    <div style="right: -16px;" class="nano-content">
                        <div class="content">
                            @if (Model.SideBarTabOne != null)
                            {
                            <div id="sidebar-tabone" class="group">
                                @Zone(Model.SideBarTabOne)
                            </div>
                            }
                        </div>
                    </div>
                    <div class="search">
                        @using (Html.BeginForm("index", "search", new { area = "Orchard.Search" }, FormMethod.Get, new { @class = "search" }))
                        {
                        @Html.TextBox("q", (SearchViewModel)Model.ViewModel.Query, new { @Class = "input", placeholder = T("Search") + "..." })<span class="s7-search"></span>
                        }
                    </div>
                    <div style="display: block;" class="nano-pane"><div style="height: 20px; transform: translate(0px, 0px);" class="nano-slider"></div></div>
                </div>
                <div id="tab2" role="tabpanel" class="tab-pane ticket am-scroller nano has-scrollbar">
                    <div style="right: -16px;" class="nano-content">
                        <div class="content">
                            @if (Model.SideBarTabTwo != null)
                             {
                            <div id="sidebar-tabtwo" class="group">
                                @Zone(Model.SideBarTabTwo)
                            </div>
                              }
                        </div>
                    </div>
                    <div class="search">
                        @using (Html.BeginForm("index", "search", new { area = "Orchard.Search" }, FormMethod.Get, new { @class = "search" }))
                        {
                        @Html.TextBox("q", (SearchViewModel)Model.ViewModel.Query, new { @Class = "input", placeholder = T("Search") + "..." })<span class="s7-search"></span>
                        }
                    </div>
                    <div style="display: none;" class="nano-pane"><div style="height: 20px; transform: translate(0px, 0px);" class="nano-slider"></div></div>
                </div>
                <div id="tab3" role="tabpanel" class="tab-pane announcement am-scroller nano has-scrollbar">
                    <div style="right: -16px;" class="nano-content">
                        <div class="content">
                            @if (Model.SideBarTabThree != null)
                            {
                                <div id="sidebar-tabthree" class="group">
                                    @Zone(Model.SideBarTabThree)
                                </div>
                            }                               
                                    <div class="archives">
                                        <h2><label>Don Boulton.com Rss</label></h2>
                                        <ul class="archiveMonthList">
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/letter-avatar">Letter Avatar</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/photoswipe-isotope">Photoswipe Isotope</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/orchard-performance">Orchard Performance</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/are-you-human-checker">Are you Human checker</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/pjs-bootstrap-3-3-5">PJS Bootstrap 3.3.5</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/machine-key-hmacsha512">Machine-Key-HMACSHA512</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/structured-data">Structured Data</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/social-sharing-no-js">Social Sharing no-.js</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/orchard-user-profile">Orchard User Profile</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/bootstrap-dropdown-login">Bootstrap dropdown logon</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/ludc-ckeditor">LuDC.CKEditor</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/colorbox-logon">Colorbox LogOn</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/search-autocomplete">Search Autocomplete</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/ckeditor-kama-dark">CKEditor Kama Dark</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/sql-sessionstate">SQL SessionState</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/sql-defrag">SQL Defrag</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/mobile-first-colorbox">Mobile First Colorbox</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/advanced-sitemap">Advanced Sitemap</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/sql-fragmentation">SQL Fragmentation</a></li>
                                            <li><a itemprop="url" rel="nofollow" href="http://donboulton.com/blogs/recaptcha-v-2">ReCaptcha V2</a></li>
                                        </ul>
                                    </div>                                
                        </div>
                    </div>
                    <div class="search">
                        @using (Html.BeginForm("index", "search", new { area = "Orchard.Search" }, FormMethod.Get, new { @class = "search" }))
                        {
                            @Html.TextBox("q", (SearchViewModel)Model.ViewModel.Query, new { @Class = "input", placeholder = T("Search") + "..." })<span class="s7-search"></span>
                        }
                    </div>
                    <div style="display: none;" class="nano-pane"><div style="height: 20px; transform: translate(0px, 0px);" class="nano-slider"></div></div>
                </div>
                <div id="tab4" role="tabpanel" class="tab-pane ticket am-scroller nano has-scrollbar">
                    <div style="right: -16px;" class="nano-content">
                        <div class="content">
                            @if (Model.SideBarTabFour != null)
                            {
                                <div id="sidebar-tabfour" class="group">
                                    @Zone(Model.SideBarTabFour)
                                </div>
                            }
                        </div>
                    </div>
                    <div class="search">
                        @using (Html.BeginForm("index", "search", new { area = "Orchard.Search" }, FormMethod.Get, new { @class = "search" }))
                        {
                            @Html.TextBox("q", (SearchViewModel)Model.ViewModel.Query, new { @Class = "input", placeholder = T("Search") + "..." })<span class="s7-search"></span>
                        }
                    </div>
                    <div style="display: none;" class="nano-pane"><div style="height: 20px; transform: translate(0px, 0px);" class="nano-slider"></div></div>
                </div>
            </div>
        </div>
    </div>
</nav>
<div id="dataConfirmModal" class="modal" role="dialog" aria-labelledby="dataConfirmLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
                <h3 id="dataConfirmLabel">@T("Confirm please")</h3>
            </div>
            <div class="modal-body"></div>
            <div class="modal-footer">
                <button class="btn" data-dismiss="modal" aria-hidden="true">@T("No")</button>
                <a class="btn btn-danger" id="dataConfirmOK">@T("Yes")</a>
            </div>
        </div>
    </div>
</div>
<div id="hidden" class="hidden" aria-hidden="true">
    <div id="inline_content" class="well-sm">
        <div class="container-fluid">
            <section class="half-size center-block">
                <div class="row">
                    <div class="col-md-5 sign-in-up">
                        <h2>Sign In</h2>
                        <form method="post" action="/Users/Account/LogOn">
                            <div>
                                <label for="logon" class="sr-only">@T("Logon Information")</label>
                                <div class="form-group">
                                    <label for="username-email">@T("Username or Email")</label>
                                    <div class="input-group">
                                        <span class="input-group-addon" id="basic-addon1"><span class="icon s7-user"></span></span>
                                        @Html.TextBox("userNameOrEmail", "", new { id = "username-email", autofocus = "autofocus", @class = "form-control validate[required]", placeholder = "Username (or email)" })
                                    </div>
                                    @Html.ValidationMessage("userNameOrEmail")
                                </div>
                                <div class="form-group">
                                    <label for="password">@T("Password")</label>
                                    <div class="input-group">
                                        <span class="input-group-addon" id="basic-addon1"><span class="icon s7-door-lock"></span></span>
                                        @Html.Password("password", null, new { @class = "form-control validate[required]", placeholder = "Password" })
                                    </div>
                                    @Html.ValidationMessage("password")
                                </div>
                                <p class="small"><a class="iframe" href="/Users/Account/RequestLostPassword" rel="nofollow">Forgot your password?</a></p>
                                <div class="form-group">
                                    <div class="am-checkbox">
                                        <input type="checkbox" id="remember-me" name="remember-me" value="remember-me" />
                                        <label for="remember-me">Remember me</label>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <button type="submit" class="btn btn-primary" name="submit.Save" value="submit">@T("Sign In")</button>
                                </div>
                            </div>
                            <input type="hidden" value="CA3WwuZ63jX3Epm1SGrIIhh4HbSRQuNXLMsu6vXUVKpGhUIb5OrcXPr6YelT…py0YGz10K1IRvpQJWj8gnOHK6EACGe2oEwXcVA_e4Ph4jxyEfZ7HaGiRrl01" name="__RequestVerificationToken" />
                        </form>
                    </div>
                    <div class="col-md-5 col-md-offset-1">
                        <h2>Sign Up</h2>
                        <p>Not a member yet?</p>
                        <p>&nbsp;</p>
                        <p>Sign up and get started!</p>
                        <div class="btn-group" role="group" aria-label="Logon">
                            <button type="button" class="btn btn-primary"><span class="icon s7-angle-right"></span></button>
                            <button type="button" class="btn btn-primary" onclick="location.href='/Users/Account/Register'">Create account</button>
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>
</div>

@using (Script.Foot())
{
    <script type="text/javascript">
        //<![CDATA[
        var confirmRemoveMessage = '@T("Are you sure you want to remove this element ?")';
        //]]>
    </script>
}
